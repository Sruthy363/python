
class Vehicle:
    def __init__(self, vehicle_id, base_rate):
        self._vehicle_id = vehicle_id      
        self._base_rate = base_rate       

    def display_details(self):
        return f"Vehicle ID: {self._vehicle_id}, Base Rate: ₹{self._base_rate:.2f}"

    def rental_charge(self):
        return 0.0


# Subclass: Car
class Car(Vehicle):
    def __init__(self, vehicle_id, base_rate, num_seats):
        super().__init__(vehicle_id, base_rate)  # Call parent constructor
        self.num_seats = num_seats

    # Overriding rental_charge()
    def rental_charge(self):
        return self._base_rate * self.num_seats


# Subclass: Bike
class Bike(Vehicle):
    def __init__(self, vehicle_id, base_rate, bike_type):
        super().__init__(vehicle_id, base_rate)  # Call parent constructor
        self.bike_type = bike_type

    # Overriding rental_charge()
    def rental_charge(self):
        return self._base_rate * 0.5


# Function to demonstrate polymorphism
def calculate_rental(vehicle_obj):
    return vehicle_obj.rental_charge()


# ---------------------------
# Example usage
# ---------------------------

# Create objects
car1 = Car("CAR001", 100.0, 4)
bike1 = Bike("BIKE001", 80.0, "Scooter")

# Display details
print(car1.display_details())
print(f"Car Rental Charge: ₹{calculate_rental(car1):.2f}\n")

print(bike1.display_details())
print(f"Bike Rental Charge: ₹{calculate_rental(bike1):.2f}")
